# pylint: disable=line-too-long, redefined-builtin, too-many-arguments, too-many-locals, unused-argument, unused-import, too-many-ancestors  # noqa: E501
"""
Autogenerated file
DO NOT EDIT.
"""
import typing

from dash_component_system import (
    DashComponent, UNDEFINED, Undefined, ComponentProp
)


class Graph(DashComponent):

    _namespace = 'dash_core_components'
    _typename = 'Graph'
    available_wildcard_properties = [

    ]
    id = ComponentProp('id', UNDEFINED, False)
    clickData = ComponentProp('clickData', UNDEFINED, False)
    clickAnnotationData = ComponentProp('clickAnnotationData', UNDEFINED, False)  # noqa: E501
    hoverData = ComponentProp('hoverData', UNDEFINED, False)
    clear_on_unhover = ComponentProp('clear_on_unhover', False, False)
    selectedData = ComponentProp('selectedData', UNDEFINED, False)
    relayoutData = ComponentProp('relayoutData', UNDEFINED, False)
    extendData = ComponentProp('extendData', UNDEFINED, False)
    restyleData = ComponentProp('restyleData', UNDEFINED, False)
    figure = ComponentProp('figure', UNDEFINED, False)
    style = ComponentProp('style', UNDEFINED, False)
    className = ComponentProp('className', UNDEFINED, False)
    animate = ComponentProp('animate', False, False)
    animation_options = ComponentProp('animation_options', UNDEFINED, False)
    config = ComponentProp('config', UNDEFINED, False)
    loading_state = ComponentProp('loading_state', UNDEFINED, False)

    def __init__(
            self,
            id=UNDEFINED,
            clickData=UNDEFINED,
            clickAnnotationData=UNDEFINED,
            hoverData=UNDEFINED,
            clear_on_unhover=False,
            selectedData=UNDEFINED,
            relayoutData=UNDEFINED,
            extendData=UNDEFINED,
            restyleData=UNDEFINED,
            figure=UNDEFINED,
            style=UNDEFINED,
            className=UNDEFINED,
            animate=False,
            animation_options=UNDEFINED,
            config=UNDEFINED,
            loading_state=UNDEFINED,
    ):
        # type: (typing.Union[str, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.List, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[str, Undefined], typing.Union[bool, Undefined], typing.Union[typing.Dict, Undefined], typing.Union[typing.Dict[str, typing.Union[bool, typing.Dict[str, typing.Union[bool]], typing.Union[float, int], typing.Any, str, typing.List]], Undefined], typing.Union[typing.Dict[str, typing.Union[bool, str]], Undefined]) -> None # noqa: E501
        """
        :param id: The ID of this component, used to identify dash
            components in callbacks. The ID needs to be unique
            across all of the components in an app.
        :param clickData: Data from latest click event. Read-
            only.(default=null)
        :param clickAnnotationData: Data from latest click annotation
            event. Read-only.(default=null)
        :param hoverData: Data from latest hover event. Read-
            only.(default=null)
        :param clear_on_unhover: If True, `clear_on_unhover` will clear the
            `hoverData` property when the user
            "unhovers" from a point. If False, then
            the `hoverData` property will be equal to
            the data from the last point that was
            hovered over.(default=false)
        :param selectedData: Data from latest select event. Read-
            only.(default=null)
        :param relayoutData: Data from latest relayout event which occurs
            when the user zooms or pans on the plot or
            other layout-level edits. Has the form `{<attr
            string>: <value>}` describing the changes
            made. Read-only.(default=null)
        :param extendData: Data that should be appended to existing traces.
            Has the form `[updateData, traceIndices,
            maxPoints]`, where `updateData` is an object
            containing the data to extend, `traceIndices`
            (optional) is an array of trace indices that
            should be extended, and `maxPoints` (optional)
            is either an integer defining the maximum number
            of points allowed or an object with key:value
            pairs matching `updateData` Reference the
            Plotly.extendTraces API for full usage:
            https://plot.ly/javascript/plotlyjs-function-
            reference/#plotlyextendtraces(default=null)
        :param restyleData: Data from latest restyle event which occurs
            when the user toggles a legend item, changes
            parcoords selections, or other trace-level
            edits. Has the form `[edits, indices]`, where
            `edits` is an object `{<attr string>: <value>}`
            describing the changes made, and `indices` is
            an array of trace indices that were edited.
            Read-only.(default=null)
        :param figure: Plotly `figure` object. See schema:
            https://plot.ly/javascript/reference Only supports
            `data` array and `layout` object. `config` is set
            separately by the `config` property, and `frames` is
            not supported.(default={data: [], layout: {}})
        :param style: Generic style overrides on the plot div
        :param className: className of the parent div
        :param animate: Beta: If true, animate between updates using
            plotly.js's `animate` function(default=false)
        :param animation_options: Beta: Object containing animation
            settings. Only applies if `animate` is
            `true`(default={     frame: {
            redraw: false,     },     transition: {
            duration: 750,         ease: 'cubic-in-
            out',     }, })
        :param config: Plotly.js config options. See
            https://plot.ly/javascript/configuration-options/
            for more info.(default={     staticPlot: false,
            editable: false,     edits: {
            annotationPosition: false,         annotationTail:
            false,         annotationText: false,
            axisTitleText: false,         colorbarPosition:
            false,         colorbarTitleText: false,
            legendPosition: false,         legendText: false,
            shapePosition: false,         titleText: false,
            },     autosizable: false,     queueLength: 0,
            fillFrame: false,     frameMargins: 0,
            scrollZoom: false,     doubleClick:
            'reset+autosize',     showTips: true,
            showAxisDragHandles: true,
            showAxisRangeEntryBoxes: true,     showLink: false,
            sendData: true,     linkText: 'Edit chart',
            showSources: false,     displayModeBar: 'hover',
            modeBarButtonsToRemove: [],     modeBarButtonsToAdd:
            [],     modeBarButtons: false,     displaylogo:
            true,     plotGlPixelRatio: 2,     topojsonURL:
            'https://cdn.plot.ly/',     mapboxAccessToken: null,
            })
        :param loading_state: Object that holds the loading state object
            coming from dash-renderer
        """
        DashComponent.__init__(self, locals())
